# -- Override name
nameOverride: ""
# -- Override fullname
fullnameOverride: ""

global:
  # -- Fully qualified domain name, used for all Ingress routes.
  # Use localhost for local testing deployments.
  ingress:
    # -- Name of the [IngressClass](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
    # to use in Ingress routes.
    className: nginx
    # -- List of [FQDNs](https://de.wikipedia.org/wiki/Fully-Qualified_Host_Name) for this Ingress.
    # Note: All FQDNs will be used for Ingress hosts and TLS certificate.
    # The global setting overwrites this setting in subcharts.
    domains:
      - localhost
    certManager:
      # -- eMail address for ACME registration with Let's Encrypt. Only used for issuerType = namespace.
      issuerEmail: me@example.com
      # -- Type of [cert-manager](https://cert-manager.io/docs/) Issuer: Use either "namespace" or "cluster".
      issuerType:
      # -- Name of the Issuer to use. For certManager.type = namespace
      # `letsencrypt-staging`, `letsencrypt-production` and `self-signed` are available.
      issuerName:

# Nginx ingress configuration -------------------------------------------------
# This needs to be enabled, if you don't have nginx-ingress installed already
# in your cluster.
ingress-nginx:
  enabled: true
  controller:
    replicaCount: 1
    loadBalancerIP: 127.0.0.1

# cert-manager configuration --------------------------------------------------
# Disable cert-manager and certIssuer for local testing, they are not required.
# Nginx ingress will create a self-signed certificate for testing automatically.

# If you want to try out cert-manager, make sure install CRDs BEFORE you install the chart.
# Make sure to enable certIssuer and configure ingress settings accordingly, see above.
# For local testing issuerType = namespace and issuerName = self-signed is recommended.
# (see here: https://cert-manager.io/docs/installation/helm/#3-install-customresourcedefinitions )
cert-manager:
  enabled: false

certIssuer:
  enabled: false

# ckan configuration ----------------------------------------------------------
ckan:
  enabled: true

  persistence:
    enabled: false
    # Annotations for PVCs
    annotations:
      # Set helm.sh/resource-policy: keep to avoid deletion of PVC on helm upgrade/uninstall
      # helm.sh/resource-policy: keep

  plugins:
  # envvars image_view text_view recline_view datastore datapusher hierarchy_display hierarchy_form
  # hierarchy_group_form geo_view geojson_view wmts_view shp_view display_group form_group
  # plugins: stats text_view image_view recline_view hierarchy_display hierarchy_form
  # scheming_datasets repeating composite display_group form_group spatial_metadata spatial_query
  # resource_proxy geojson_view relation disqus temporalsearch userautoaddgroup restricted
  # gdpr importerexporter

  siteUrl: https://localhost

  image:
    repository: ghcr.io/keitaroinc/ckan

  imagePullSecrets:
    - name: *ckan-pull-sct

  # Readyness and liveness checks -----------------------------------------------
  startup:
    # -- Inital delay seconds for the startup probe.
    initialDelaySeconds: 60
    # -- Check interval for the startup probe
    periodSeconds: 10
    # -- Failure threshold for the startup probe
    failureThreshold: 60
    # -- Timeout interval for the startup probe
    # Note: The CKAN pod may take some time to startup on slow systems, e.g. one
    # testing clusters. Make sure to set this value high enough to avoid the pod
    # being restarted before it has fully initialized.
    timeoutSeconds: 10
